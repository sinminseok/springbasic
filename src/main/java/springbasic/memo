//좋은 객체지향 설계 5가지 원칙의 적용
//SRP,DIP,OCP 적용
//SRP 단일 책임 원칙 한 클래스는 하나의 책임만을 가져아한다.
// - 클라이언트 객체는 직접 구현객체를 생성하고 연결하고 실행하는 다양한 책임을 가지고 있음
// - SRP단일 책임 원칙을 따르면서 관심사를 분리함
// -클라이언트 객체는 실행하는 책임만 담당

DIP 의존관계 역전 원칙
프로그래머는 추상화에 의존해야지 구체화에 의존해선 안된다. 의존성 주입은 이 원칙을 따르는 방법중
하나이다.

AppConfig가 할인정책 객체 인스턴스를 클라이언트 코드 대신 생성해서 클라이언트 코드에 의존관계를
주입했다, 이렇게해서 DIP원칙을 따르면서 문제를 해결했다.

OCP
소프트웨어 요소는 확장에는 열려있으나 변ㄱ셩에는 닫혀있어야한다.

다형성 사용하고 클라이언트가 DIP를 지킴
애플리케이션을 사용역역 구성영역으로 나눔
AppConfig가 의존관계를 FixDiscount -> RateDiscountPolicy로 변경해 클라이언트코드에 주입하므로
클라이언트 코드는 변경하지 않아도된다.
--소프트웨어 요소를 새롭게 확장해도 사용영역의 변경은 닫혀있으므로 OCP를 준수하고있다.

IOC,ID,Container

제어의 역전 IOC(Inversion of Control)
기존 프로그램은 클라이언ㅌ  구현객체가 스스로 필요한 서버 구현객체를 생성하고 연결 실행했다.한마디로 구현
객체가 프로그램의 제어 흐름을 스스로 조정했다. 개발자 입장에선 자연스러운 흐름이다.
반면 AppConfig가 등장한 이후 구현객체는 자신의 로직을 실행하는 역할만을 담당
프로그램의 제어 흐름은 이제 AppConfig가 가져간다. 예를들어 OrderServiceImpl은 필요한 인터페이스들을 호출하지만
어떤 구현객체들이 실행될지 모른다.

프로그램에 대한 제어 흐름에 대한 권한은 모두 AppConfig가 가지고 있다.

이렇듯 프로그램의 제어 흐름을 직접 제어하는게 아닌 외부에서 관리하는것을 제어의 역전이라한다.

Appconfig처럼 객체를 생성하고 관리하면서 의존관계를 연결해주는것을 IOC컨테이너 또는 DI컨테이너라고한다.
